./depmap.sh
  [-d directory]
  [-b base]
  [-f exts]
  [-s local|global|all]
  [-o graphml|tgf|dot|txt]
  [-I search-path]
  [-g levels]
  [-p presentation]

 Mark K Cowan, mark@battlesnake.co.uk, github.com/battlesnake

  - Scan files in <directory> tree(s) (which match extension <filter>)
    for #includes
  - Restrict to includes within given <scope>
  - Transform paths to be relative to <base> (for files within <base>)
  - Graphml only: group <levels> subdirectory levels as subgraphs
  - Graphml only: use <presentation> file to add visual formatting to
    nodes
  - Dump data as graph using given <output> format

  * <directory> defaults to the current directory if none are specified
  * <base> defaults to the first <directory> if not specified
  * <exts> defaults to c,cpp,h,hpp,tcc
  * <format> defaults to 'txt' if not specified
  * <scope> defaults to 'local' if not specified
  * <levels> defaults to 0
  * <presentation>, if unspecified defaults to just adding node labels

 Filters (-f)
  * comma-separated list of file extensions to scan for,
    e.g. c,cpp,h,hpp,tcc
  * you may get a more meaningful graph by restricting to only
    headers: h,hpp

 Scope (-s)
  - local is all "#include" with quoted filenames which are found
  - global is "#include" and also <#include> which are found in
    search path
  - all is all #include, even ones which cannot be found

 Output formats (-o)
  - graphml is GraphML (an xml-based format compatible with yEd)
  - tgf is Trivial Graph Format (compatible with yEd but nodes are
    unlabelled)
  - dot is DOT format (can be converted to GraphML via dottoxml but
    becomes undirected)
  - txt is plain format file=dep1,...depN

 Presentation (-p, graphml only)
  - A script which is called for each graph, node, and edge.
    Syntax: ./myscript depmap-gml [keys|branch|leaf] <path>
            keys   = create <key> tags for start of document
            branch = create <data> tags for subgraph node
            leaf   = create <data> tags for leaf node
    Output: STDOUT: xml fragments with presentational information to
            be embedded in the relevant xml node
    Example invocation:
                    ./myscript depmap-gml leaf service auth/facebook
    Example output: 
                    echo "<data key="nodelabel"><y:ShapeNode>"
                    echo "  <y:NodeLabel>${!#}</y:NodeLabel>"
                    echo "</y:ShapeNode></data>"
  - The presenter script is first searched for in the 'presenters'
    directory which is in the same folder as the depmap.sh script.
  - If not found there, then it is assumed to be the path to a script.
  - An example presenter called 'modern' is provided.
    Use '-p modern' in the command line to invoke the script at
    presenters/modern.sh

 Requires recent versions of bash & realpath, awk, perl

